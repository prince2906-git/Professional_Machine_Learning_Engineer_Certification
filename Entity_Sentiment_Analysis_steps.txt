Task 1. Create an API key
    To create an API key, in the Cloud Console, select Navigation menu > APIs & Services > Credentials.
    Click Create credentials and select API key.
    Copy the generated API key and click Close.

    export API_KEY=AIzaSyBjciPfTnrY-eg-c_kGqLx3Vc5yr7n9dQY

Task 2. Make an entity analysis request
    Use the following curl command to make an entity analysis request.
    create request.json file with following content:
    {
    "document":{
    "type":"PLAIN_TEXT",
    "content":"Joanne Rowling, who writes under the pen names J. K. Rowling and Robert Galbraith, is a British novelist and screenwriter who wrote the Harry Potter fantasy series."
    },
    "encodingType":"UTF8"
    }

    you're telling the Natural Language API about the text being sent. Supported type values are PLAIN_TEXT or HTML. In content, you pass the text to send to the Natural Language API for analysis.
    The Natural Language API also supports sending files stored in Cloud Storage for text processing. If you wanted to send a file from Cloud Storage, you would replace content with gcsContentUri and give it a value of the text file's uri in Cloud Storage.
    encodingType tells the API which type of text encoding to use when processing our text. The API will use this to calculate where specific entities appear in our text.

Task 3. Call the Natural Language API
    curl "https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY}" \
  -s -X POST -H "Content-Type: application/json" --data-binary @request.json > result.json

Task 4. Sentiment analysis with the Natural Language API
    To extracting entities, the Natural Language API also lets you perform sentiment analysis on a block of text. This JSON request will include the same parameters as the request above, but this time change the text to include something with a stronger sentiment.
    Create request.json file with following content:
     {
        "document":{
        "type":"PLAIN_TEXT",
        "content":"Harry Potter is the best book. I think everyone should read it."
        },
    "encodingType": "UTF8"
    }
    send the request to the API's analyzeSentiment endpoint
    curl "https://language.googleapis.com/v1/documents:analyzeSentiment?key=${API_KEY}" \
  -s -X POST -H "Content-Type: application/json" --data-binary @request.json

  Notice that you get two types of sentiment values: sentiment for the document as a whole, and sentiment broken down by sentence. The sentiment method returns two values:

    score - is a number from -1.0 to 1.0 indicating how positive or negative the statement is.
    magnitude - is a number ranging from 0 to infinity that represents the weight of sentiment expressed in the statement, regardless of being positive or negative.
    Longer blocks of text with heavily weighted statements have higher magnitude values. The score for the first sentence is positive (0.9), whereas the score for the second sentence is also positive (0.9).

Task 5. Analyzing entity sentiment
    In addition to providing sentiment details on the entire text document, the Natural Language API can also break down sentiment by the entities in the text. Use this sentence as an example:
    I liked the sushi but the service was terrible.

Task 6. Analyzing syntax and parts of speech
    Use syntactic analysis, another of the Natural Language API's methods, to dive deeper into the linguistic details of the text. analyzeSyntax extracts linguistic information, breaking up the given text into a series of sentences and tokens (generally, word boundaries), to provide further analysis on those tokens. For each word in the text, the API tells you the word's part of speech (noun, verb, adjective, etc.) and how it relates to other words in the sentence (Is it the root verb? A modifier?).
    Request.json
        {
        "document":{
        "type":"PLAIN_TEXT",
         "content": "Joanne Rowling is a British novelist, screenwriter and film producer."
        },
        "encodingType": "UTF8"

    }

    curl "https://language.googleapis.com/v1/documents:analyzeSyntax?key=${API_KEY}" \
  -s -X POST -H "Content-Type: application/json" --data-binary @request.json
  "partOfSpeech": {
        "tag": "ADJ",
        "aspect": "ASPECT_UNKNOWN",
        "case": "CASE_UNKNOWN",
        "form": "FORM_UNKNOWN",
        "gender": "GENDER_UNKNOWN",
        "mood": "MOOD_UNKNOWN",
        "number": "NUMBER_UNKNOWN",
        "person": "PERSON_UNKNOWN",
        "proper": "PROPER_UNKNOWN",
        "reciprocity": "RECIPROCITY_UNKNOWN",
        "tense": "TENSE_UNKNOWN",
        "voice": "VOICE_UNKNOWN"
      }

      partOfSpeech tells you that "Joanne" is a noun.
      dependencyEdge includes data that you can use to create a dependency parse tree of the text. Essentially, this is a diagram showing how words in a sentence relate to each other. A dependency parse tree for the sentence above would look like this:
      headTokenIndex is the index of the token that has an arc pointing at "Joanne". Think of each token in the sentence as a word in an array.
headTokenIndex of 1 for "Joanne" refers to the word "Rowling", which it is connected to in the tree. The label NN (short for noun compound modifier) describes the word's role in the sentence. "Joanne" modifies "Rowling", the subject of the sentence.
lemma is the canonical form of the word. For example, the words run, runs, ran, and running all have a lemma of run. The lemma value is useful for tracking occurrences of a word in a large piece of text over time.

Task 7. Multilingual natural language processing
    Request.json
    {
  "document":{
    "type":"PLAIN_TEXT",
    "content":"日本のグーグルのオフィスは、東京の六本木ヒルズにあります"
  }
}

curl "https://language.googleapis.com/v1/documents:analyzeEntities?key=${API_KEY}" \
  -s -X POST -H "Content-Type: application/json" --data-binary @request.json

-- Testing Angry sentiment
    Request.json
    {
    "document":{
    "type":"PLAIN_TEXT",
    "content":"I hate this product. It is the worst thing I have ever bought.I am extremely angry with the terrible service. This is the worst experience ever and I hate everything about it!"
    },
    "encodingType": "UTF8"
    }

    curl "https://language.googleapis.com/v1/documents:analyzeSentiment?key=${API_KEY}" \
-s -X POST -H "Content-Type: application/json" --data-binary @request.json

{
  "documentSentiment": {
    "magnitude": 2.6,
    "score": -0.8
  },
  "language": "en",
  "sentences": [
    {
      "text": {
        "content": "I hate this product.",
        "beginOffset": 0
      },
      "sentiment": {
        "magnitude": 0.9,
        "score": -0.9
      }
    },
    {
      "text": {
        "content": "It is the worst thing I have ever bought.I am extremely angry with the terrible service.",
        "beginOffset": 21
      },
      "sentiment": {
        "magnitude": 0.8,
        "score": -0.8
      }
    },
    {
      "text": {
        "content": "This is the worst experience ever and I hate everything about it!",
        "beginOffset": 110
      },
      "sentiment": {
        "magnitude": 0.8,
        "score": -0.8
      }
    }
  ]
}

